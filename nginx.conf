worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    upstream auth_backend {
        server auth_service:8000; # Corresponds to container_name:port
    }

    upstream blog_backend {
        server blog_service:5000; # Corresponds to container_name:port
    }

    server {
        listen 80;
        server_name localhost; # Change to your domain name if you have one (e.g., yourblog.com)

        # Route for Authentication Service
        # Requests starting with /api/users will go to auth_service
        location /api/users/ {
            proxy_pass http://auth_backend/; # Note the trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # If your auth_service handles websockets (e.g., for real-time notifications)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Route for Blog Service
        # Requests starting with /api/blog will go to blog_service
        location /api/blog/ {
            proxy_pass http://blog_backend/; # Note the trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # If your blog_service handles websockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Catch-all for any other requests (e.g., frontend static files, or a default response)
        location / {
            # Or, for a simple API gateway without a frontend served by Nginx:
            return 404 "Not Found: No route defined for this path.";
            # proxy_pass http://your_frontend_service:PORT;
        }

        # Optional: Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html; # Point to a simple 404 page if you have one
            internal;
        }
    }
}